/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.linkedin.pinot.common.response;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * Aggregation result.
 * Interesting Notes: Tags upto 15 takes only one byte but after that takes 2  * or more bytes. So, keep the ones most frequently used with lower tags
 * 
 */
public class AggregationResult extends org.apache.thrift.TUnion<AggregationResult, AggregationResult._Fields> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AggregationResult");
  private static final org.apache.thrift.protocol.TField LONG_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("longVal", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField STRING_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("stringVal", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField DOUBLE_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("doubleVal", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField LONG_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("longSet", org.apache.thrift.protocol.TType.SET, (short)4);
  private static final org.apache.thrift.protocol.TField STRING_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("stringSet", org.apache.thrift.protocol.TType.SET, (short)5);
  private static final org.apache.thrift.protocol.TField DOUBLE_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("doubleSet", org.apache.thrift.protocol.TType.SET, (short)6);
  private static final org.apache.thrift.protocol.TField STRING_STRING_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("stringStringMap", org.apache.thrift.protocol.TType.MAP, (short)7);
  private static final org.apache.thrift.protocol.TField STRING_LONG_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("stringLongMap", org.apache.thrift.protocol.TType.MAP, (short)8);
  private static final org.apache.thrift.protocol.TField STRING_DOUBLE_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("stringDoubleMap", org.apache.thrift.protocol.TType.MAP, (short)9);
  private static final org.apache.thrift.protocol.TField STRING_STRING_SET_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("stringStringSetMap", org.apache.thrift.protocol.TType.MAP, (short)10);
  private static final org.apache.thrift.protocol.TField STRING_LONG_SET_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("stringLongSetMap", org.apache.thrift.protocol.TType.MAP, (short)11);
  private static final org.apache.thrift.protocol.TField STRING_DOUBLE_SET_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("stringDoubleSetMap", org.apache.thrift.protocol.TType.MAP, (short)12);

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    LONG_VAL((short)1, "longVal"),
    STRING_VAL((short)2, "stringVal"),
    DOUBLE_VAL((short)3, "doubleVal"),
    LONG_SET((short)4, "longSet"),
    STRING_SET((short)5, "stringSet"),
    DOUBLE_SET((short)6, "doubleSet"),
    STRING_STRING_MAP((short)7, "stringStringMap"),
    STRING_LONG_MAP((short)8, "stringLongMap"),
    STRING_DOUBLE_MAP((short)9, "stringDoubleMap"),
    STRING_STRING_SET_MAP((short)10, "stringStringSetMap"),
    STRING_LONG_SET_MAP((short)11, "stringLongSetMap"),
    STRING_DOUBLE_SET_MAP((short)12, "stringDoubleSetMap");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LONG_VAL
          return LONG_VAL;
        case 2: // STRING_VAL
          return STRING_VAL;
        case 3: // DOUBLE_VAL
          return DOUBLE_VAL;
        case 4: // LONG_SET
          return LONG_SET;
        case 5: // STRING_SET
          return STRING_SET;
        case 6: // DOUBLE_SET
          return DOUBLE_SET;
        case 7: // STRING_STRING_MAP
          return STRING_STRING_MAP;
        case 8: // STRING_LONG_MAP
          return STRING_LONG_MAP;
        case 9: // STRING_DOUBLE_MAP
          return STRING_DOUBLE_MAP;
        case 10: // STRING_STRING_SET_MAP
          return STRING_STRING_SET_MAP;
        case 11: // STRING_LONG_SET_MAP
          return STRING_LONG_SET_MAP;
        case 12: // STRING_DOUBLE_SET_MAP
          return STRING_DOUBLE_SET_MAP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LONG_VAL, new org.apache.thrift.meta_data.FieldMetaData("longVal", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.STRING_VAL, new org.apache.thrift.meta_data.FieldMetaData("stringVal", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DOUBLE_VAL, new org.apache.thrift.meta_data.FieldMetaData("doubleVal", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.LONG_SET, new org.apache.thrift.meta_data.FieldMetaData("longSet", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.STRING_SET, new org.apache.thrift.meta_data.FieldMetaData("stringSet", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.DOUBLE_SET, new org.apache.thrift.meta_data.FieldMetaData("doubleSet", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.STRING_STRING_MAP, new org.apache.thrift.meta_data.FieldMetaData("stringStringMap", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.STRING_LONG_MAP, new org.apache.thrift.meta_data.FieldMetaData("stringLongMap", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.STRING_DOUBLE_MAP, new org.apache.thrift.meta_data.FieldMetaData("stringDoubleMap", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.STRING_STRING_SET_MAP, new org.apache.thrift.meta_data.FieldMetaData("stringStringSetMap", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
    tmpMap.put(_Fields.STRING_LONG_SET_MAP, new org.apache.thrift.meta_data.FieldMetaData("stringLongSetMap", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)))));
    tmpMap.put(_Fields.STRING_DOUBLE_SET_MAP, new org.apache.thrift.meta_data.FieldMetaData("stringDoubleSetMap", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AggregationResult.class, metaDataMap);
  }

  public AggregationResult() {
    super();
  }

  public AggregationResult(_Fields setField, Object value) {
    super(setField, value);
  }

  public AggregationResult(AggregationResult other) {
    super(other);
  }
  public AggregationResult deepCopy() {
    return new AggregationResult(this);
  }

  public static AggregationResult longVal(long value) {
    AggregationResult x = new AggregationResult();
    x.setLongVal(value);
    return x;
  }

  public static AggregationResult stringVal(String value) {
    AggregationResult x = new AggregationResult();
    x.setStringVal(value);
    return x;
  }

  public static AggregationResult doubleVal(double value) {
    AggregationResult x = new AggregationResult();
    x.setDoubleVal(value);
    return x;
  }

  public static AggregationResult longSet(Set<Long> value) {
    AggregationResult x = new AggregationResult();
    x.setLongSet(value);
    return x;
  }

  public static AggregationResult stringSet(Set<String> value) {
    AggregationResult x = new AggregationResult();
    x.setStringSet(value);
    return x;
  }

  public static AggregationResult doubleSet(Set<Double> value) {
    AggregationResult x = new AggregationResult();
    x.setDoubleSet(value);
    return x;
  }

  public static AggregationResult stringStringMap(Map<String,String> value) {
    AggregationResult x = new AggregationResult();
    x.setStringStringMap(value);
    return x;
  }

  public static AggregationResult stringLongMap(Map<String,Long> value) {
    AggregationResult x = new AggregationResult();
    x.setStringLongMap(value);
    return x;
  }

  public static AggregationResult stringDoubleMap(Map<String,Double> value) {
    AggregationResult x = new AggregationResult();
    x.setStringDoubleMap(value);
    return x;
  }

  public static AggregationResult stringStringSetMap(Map<String,Set<String>> value) {
    AggregationResult x = new AggregationResult();
    x.setStringStringSetMap(value);
    return x;
  }

  public static AggregationResult stringLongSetMap(Map<String,Set<Long>> value) {
    AggregationResult x = new AggregationResult();
    x.setStringLongSetMap(value);
    return x;
  }

  public static AggregationResult stringDoubleSetMap(Map<String,Set<Double>> value) {
    AggregationResult x = new AggregationResult();
    x.setStringDoubleSetMap(value);
    return x;
  }


  @Override
  protected void checkType(_Fields setField, Object value) throws ClassCastException {
    switch (setField) {
      case LONG_VAL:
        if (value instanceof Long) {
          break;
        }
        throw new ClassCastException("Was expecting value of type Long for field 'longVal', but got " + value.getClass().getSimpleName());
      case STRING_VAL:
        if (value instanceof String) {
          break;
        }
        throw new ClassCastException("Was expecting value of type String for field 'stringVal', but got " + value.getClass().getSimpleName());
      case DOUBLE_VAL:
        if (value instanceof Double) {
          break;
        }
        throw new ClassCastException("Was expecting value of type Double for field 'doubleVal', but got " + value.getClass().getSimpleName());
      case LONG_SET:
        if (value instanceof Set) {
          break;
        }
        throw new ClassCastException("Was expecting value of type Set<Long> for field 'longSet', but got " + value.getClass().getSimpleName());
      case STRING_SET:
        if (value instanceof Set) {
          break;
        }
        throw new ClassCastException("Was expecting value of type Set<String> for field 'stringSet', but got " + value.getClass().getSimpleName());
      case DOUBLE_SET:
        if (value instanceof Set) {
          break;
        }
        throw new ClassCastException("Was expecting value of type Set<Double> for field 'doubleSet', but got " + value.getClass().getSimpleName());
      case STRING_STRING_MAP:
        if (value instanceof Map) {
          break;
        }
        throw new ClassCastException("Was expecting value of type Map<String,String> for field 'stringStringMap', but got " + value.getClass().getSimpleName());
      case STRING_LONG_MAP:
        if (value instanceof Map) {
          break;
        }
        throw new ClassCastException("Was expecting value of type Map<String,Long> for field 'stringLongMap', but got " + value.getClass().getSimpleName());
      case STRING_DOUBLE_MAP:
        if (value instanceof Map) {
          break;
        }
        throw new ClassCastException("Was expecting value of type Map<String,Double> for field 'stringDoubleMap', but got " + value.getClass().getSimpleName());
      case STRING_STRING_SET_MAP:
        if (value instanceof Map) {
          break;
        }
        throw new ClassCastException("Was expecting value of type Map<String,Set<String>> for field 'stringStringSetMap', but got " + value.getClass().getSimpleName());
      case STRING_LONG_SET_MAP:
        if (value instanceof Map) {
          break;
        }
        throw new ClassCastException("Was expecting value of type Map<String,Set<Long>> for field 'stringLongSetMap', but got " + value.getClass().getSimpleName());
      case STRING_DOUBLE_SET_MAP:
        if (value instanceof Map) {
          break;
        }
        throw new ClassCastException("Was expecting value of type Map<String,Set<Double>> for field 'stringDoubleSetMap', but got " + value.getClass().getSimpleName());
      default:
        throw new IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected Object standardSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TField field) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(field.id);
    if (setField != null) {
      switch (setField) {
        case LONG_VAL:
          if (field.type == LONG_VAL_FIELD_DESC.type) {
            Long longVal;
            longVal = iprot.readI64();
            return longVal;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case STRING_VAL:
          if (field.type == STRING_VAL_FIELD_DESC.type) {
            String stringVal;
            stringVal = iprot.readString();
            return stringVal;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case DOUBLE_VAL:
          if (field.type == DOUBLE_VAL_FIELD_DESC.type) {
            Double doubleVal;
            doubleVal = iprot.readDouble();
            return doubleVal;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case LONG_SET:
          if (field.type == LONG_SET_FIELD_DESC.type) {
            Set<Long> longSet;
            {
              org.apache.thrift.protocol.TSet _set0 = iprot.readSetBegin();
              longSet = new HashSet<Long>(2*_set0.size);
              long _elem1;
              for (int _i2 = 0; _i2 < _set0.size; ++_i2)
              {
                _elem1 = iprot.readI64();
                longSet.add(_elem1);
              }
              iprot.readSetEnd();
            }
            return longSet;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case STRING_SET:
          if (field.type == STRING_SET_FIELD_DESC.type) {
            Set<String> stringSet;
            {
              org.apache.thrift.protocol.TSet _set3 = iprot.readSetBegin();
              stringSet = new HashSet<String>(2*_set3.size);
              String _elem4;
              for (int _i5 = 0; _i5 < _set3.size; ++_i5)
              {
                _elem4 = iprot.readString();
                stringSet.add(_elem4);
              }
              iprot.readSetEnd();
            }
            return stringSet;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case DOUBLE_SET:
          if (field.type == DOUBLE_SET_FIELD_DESC.type) {
            Set<Double> doubleSet;
            {
              org.apache.thrift.protocol.TSet _set6 = iprot.readSetBegin();
              doubleSet = new HashSet<Double>(2*_set6.size);
              double _elem7;
              for (int _i8 = 0; _i8 < _set6.size; ++_i8)
              {
                _elem7 = iprot.readDouble();
                doubleSet.add(_elem7);
              }
              iprot.readSetEnd();
            }
            return doubleSet;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case STRING_STRING_MAP:
          if (field.type == STRING_STRING_MAP_FIELD_DESC.type) {
            Map<String,String> stringStringMap;
            {
              org.apache.thrift.protocol.TMap _map9 = iprot.readMapBegin();
              stringStringMap = new HashMap<String,String>(2*_map9.size);
              String _key10;
              String _val11;
              for (int _i12 = 0; _i12 < _map9.size; ++_i12)
              {
                _key10 = iprot.readString();
                _val11 = iprot.readString();
                stringStringMap.put(_key10, _val11);
              }
              iprot.readMapEnd();
            }
            return stringStringMap;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case STRING_LONG_MAP:
          if (field.type == STRING_LONG_MAP_FIELD_DESC.type) {
            Map<String,Long> stringLongMap;
            {
              org.apache.thrift.protocol.TMap _map13 = iprot.readMapBegin();
              stringLongMap = new HashMap<String,Long>(2*_map13.size);
              String _key14;
              long _val15;
              for (int _i16 = 0; _i16 < _map13.size; ++_i16)
              {
                _key14 = iprot.readString();
                _val15 = iprot.readI64();
                stringLongMap.put(_key14, _val15);
              }
              iprot.readMapEnd();
            }
            return stringLongMap;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case STRING_DOUBLE_MAP:
          if (field.type == STRING_DOUBLE_MAP_FIELD_DESC.type) {
            Map<String,Double> stringDoubleMap;
            {
              org.apache.thrift.protocol.TMap _map17 = iprot.readMapBegin();
              stringDoubleMap = new HashMap<String,Double>(2*_map17.size);
              String _key18;
              double _val19;
              for (int _i20 = 0; _i20 < _map17.size; ++_i20)
              {
                _key18 = iprot.readString();
                _val19 = iprot.readDouble();
                stringDoubleMap.put(_key18, _val19);
              }
              iprot.readMapEnd();
            }
            return stringDoubleMap;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case STRING_STRING_SET_MAP:
          if (field.type == STRING_STRING_SET_MAP_FIELD_DESC.type) {
            Map<String,Set<String>> stringStringSetMap;
            {
              org.apache.thrift.protocol.TMap _map21 = iprot.readMapBegin();
              stringStringSetMap = new HashMap<String,Set<String>>(2*_map21.size);
              String _key22;
              Set<String> _val23;
              for (int _i24 = 0; _i24 < _map21.size; ++_i24)
              {
                _key22 = iprot.readString();
                {
                  org.apache.thrift.protocol.TSet _set25 = iprot.readSetBegin();
                  _val23 = new HashSet<String>(2*_set25.size);
                  String _elem26;
                  for (int _i27 = 0; _i27 < _set25.size; ++_i27)
                  {
                    _elem26 = iprot.readString();
                    _val23.add(_elem26);
                  }
                  iprot.readSetEnd();
                }
                stringStringSetMap.put(_key22, _val23);
              }
              iprot.readMapEnd();
            }
            return stringStringSetMap;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case STRING_LONG_SET_MAP:
          if (field.type == STRING_LONG_SET_MAP_FIELD_DESC.type) {
            Map<String,Set<Long>> stringLongSetMap;
            {
              org.apache.thrift.protocol.TMap _map28 = iprot.readMapBegin();
              stringLongSetMap = new HashMap<String,Set<Long>>(2*_map28.size);
              String _key29;
              Set<Long> _val30;
              for (int _i31 = 0; _i31 < _map28.size; ++_i31)
              {
                _key29 = iprot.readString();
                {
                  org.apache.thrift.protocol.TSet _set32 = iprot.readSetBegin();
                  _val30 = new HashSet<Long>(2*_set32.size);
                  long _elem33;
                  for (int _i34 = 0; _i34 < _set32.size; ++_i34)
                  {
                    _elem33 = iprot.readI64();
                    _val30.add(_elem33);
                  }
                  iprot.readSetEnd();
                }
                stringLongSetMap.put(_key29, _val30);
              }
              iprot.readMapEnd();
            }
            return stringLongSetMap;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case STRING_DOUBLE_SET_MAP:
          if (field.type == STRING_DOUBLE_SET_MAP_FIELD_DESC.type) {
            Map<String,Set<Double>> stringDoubleSetMap;
            {
              org.apache.thrift.protocol.TMap _map35 = iprot.readMapBegin();
              stringDoubleSetMap = new HashMap<String,Set<Double>>(2*_map35.size);
              String _key36;
              Set<Double> _val37;
              for (int _i38 = 0; _i38 < _map35.size; ++_i38)
              {
                _key36 = iprot.readString();
                {
                  org.apache.thrift.protocol.TSet _set39 = iprot.readSetBegin();
                  _val37 = new HashSet<Double>(2*_set39.size);
                  double _elem40;
                  for (int _i41 = 0; _i41 < _set39.size; ++_i41)
                  {
                    _elem40 = iprot.readDouble();
                    _val37.add(_elem40);
                  }
                  iprot.readSetEnd();
                }
                stringDoubleSetMap.put(_key36, _val37);
              }
              iprot.readMapEnd();
            }
            return stringDoubleSetMap;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        default:
          throw new IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      return null;
    }
  }

  @Override
  protected void standardSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case LONG_VAL:
        Long longVal = (Long)value_;
        oprot.writeI64(longVal);
        return;
      case STRING_VAL:
        String stringVal = (String)value_;
        oprot.writeString(stringVal);
        return;
      case DOUBLE_VAL:
        Double doubleVal = (Double)value_;
        oprot.writeDouble(doubleVal);
        return;
      case LONG_SET:
        Set<Long> longSet = (Set<Long>)value_;
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I64, longSet.size()));
          for (long _iter42 : longSet)
          {
            oprot.writeI64(_iter42);
          }
          oprot.writeSetEnd();
        }
        return;
      case STRING_SET:
        Set<String> stringSet = (Set<String>)value_;
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, stringSet.size()));
          for (String _iter43 : stringSet)
          {
            oprot.writeString(_iter43);
          }
          oprot.writeSetEnd();
        }
        return;
      case DOUBLE_SET:
        Set<Double> doubleSet = (Set<Double>)value_;
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.DOUBLE, doubleSet.size()));
          for (double _iter44 : doubleSet)
          {
            oprot.writeDouble(_iter44);
          }
          oprot.writeSetEnd();
        }
        return;
      case STRING_STRING_MAP:
        Map<String,String> stringStringMap = (Map<String,String>)value_;
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, stringStringMap.size()));
          for (Map.Entry<String, String> _iter45 : stringStringMap.entrySet())
          {
            oprot.writeString(_iter45.getKey());
            oprot.writeString(_iter45.getValue());
          }
          oprot.writeMapEnd();
        }
        return;
      case STRING_LONG_MAP:
        Map<String,Long> stringLongMap = (Map<String,Long>)value_;
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I64, stringLongMap.size()));
          for (Map.Entry<String, Long> _iter46 : stringLongMap.entrySet())
          {
            oprot.writeString(_iter46.getKey());
            oprot.writeI64(_iter46.getValue());
          }
          oprot.writeMapEnd();
        }
        return;
      case STRING_DOUBLE_MAP:
        Map<String,Double> stringDoubleMap = (Map<String,Double>)value_;
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.DOUBLE, stringDoubleMap.size()));
          for (Map.Entry<String, Double> _iter47 : stringDoubleMap.entrySet())
          {
            oprot.writeString(_iter47.getKey());
            oprot.writeDouble(_iter47.getValue());
          }
          oprot.writeMapEnd();
        }
        return;
      case STRING_STRING_SET_MAP:
        Map<String,Set<String>> stringStringSetMap = (Map<String,Set<String>>)value_;
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.SET, stringStringSetMap.size()));
          for (Map.Entry<String, Set<String>> _iter48 : stringStringSetMap.entrySet())
          {
            oprot.writeString(_iter48.getKey());
            {
              oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, _iter48.getValue().size()));
              for (String _iter49 : _iter48.getValue())
              {
                oprot.writeString(_iter49);
              }
              oprot.writeSetEnd();
            }
          }
          oprot.writeMapEnd();
        }
        return;
      case STRING_LONG_SET_MAP:
        Map<String,Set<Long>> stringLongSetMap = (Map<String,Set<Long>>)value_;
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.SET, stringLongSetMap.size()));
          for (Map.Entry<String, Set<Long>> _iter50 : stringLongSetMap.entrySet())
          {
            oprot.writeString(_iter50.getKey());
            {
              oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I64, _iter50.getValue().size()));
              for (long _iter51 : _iter50.getValue())
              {
                oprot.writeI64(_iter51);
              }
              oprot.writeSetEnd();
            }
          }
          oprot.writeMapEnd();
        }
        return;
      case STRING_DOUBLE_SET_MAP:
        Map<String,Set<Double>> stringDoubleSetMap = (Map<String,Set<Double>>)value_;
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.SET, stringDoubleSetMap.size()));
          for (Map.Entry<String, Set<Double>> _iter52 : stringDoubleSetMap.entrySet())
          {
            oprot.writeString(_iter52.getKey());
            {
              oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.DOUBLE, _iter52.getValue().size()));
              for (double _iter53 : _iter52.getValue())
              {
                oprot.writeDouble(_iter53);
              }
              oprot.writeSetEnd();
            }
          }
          oprot.writeMapEnd();
        }
        return;
      default:
        throw new IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected Object tupleSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, short fieldID) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(fieldID);
    if (setField != null) {
      switch (setField) {
        case LONG_VAL:
          Long longVal;
          longVal = iprot.readI64();
          return longVal;
        case STRING_VAL:
          String stringVal;
          stringVal = iprot.readString();
          return stringVal;
        case DOUBLE_VAL:
          Double doubleVal;
          doubleVal = iprot.readDouble();
          return doubleVal;
        case LONG_SET:
          Set<Long> longSet;
          {
            org.apache.thrift.protocol.TSet _set54 = iprot.readSetBegin();
            longSet = new HashSet<Long>(2*_set54.size);
            long _elem55;
            for (int _i56 = 0; _i56 < _set54.size; ++_i56)
            {
              _elem55 = iprot.readI64();
              longSet.add(_elem55);
            }
            iprot.readSetEnd();
          }
          return longSet;
        case STRING_SET:
          Set<String> stringSet;
          {
            org.apache.thrift.protocol.TSet _set57 = iprot.readSetBegin();
            stringSet = new HashSet<String>(2*_set57.size);
            String _elem58;
            for (int _i59 = 0; _i59 < _set57.size; ++_i59)
            {
              _elem58 = iprot.readString();
              stringSet.add(_elem58);
            }
            iprot.readSetEnd();
          }
          return stringSet;
        case DOUBLE_SET:
          Set<Double> doubleSet;
          {
            org.apache.thrift.protocol.TSet _set60 = iprot.readSetBegin();
            doubleSet = new HashSet<Double>(2*_set60.size);
            double _elem61;
            for (int _i62 = 0; _i62 < _set60.size; ++_i62)
            {
              _elem61 = iprot.readDouble();
              doubleSet.add(_elem61);
            }
            iprot.readSetEnd();
          }
          return doubleSet;
        case STRING_STRING_MAP:
          Map<String,String> stringStringMap;
          {
            org.apache.thrift.protocol.TMap _map63 = iprot.readMapBegin();
            stringStringMap = new HashMap<String,String>(2*_map63.size);
            String _key64;
            String _val65;
            for (int _i66 = 0; _i66 < _map63.size; ++_i66)
            {
              _key64 = iprot.readString();
              _val65 = iprot.readString();
              stringStringMap.put(_key64, _val65);
            }
            iprot.readMapEnd();
          }
          return stringStringMap;
        case STRING_LONG_MAP:
          Map<String,Long> stringLongMap;
          {
            org.apache.thrift.protocol.TMap _map67 = iprot.readMapBegin();
            stringLongMap = new HashMap<String,Long>(2*_map67.size);
            String _key68;
            long _val69;
            for (int _i70 = 0; _i70 < _map67.size; ++_i70)
            {
              _key68 = iprot.readString();
              _val69 = iprot.readI64();
              stringLongMap.put(_key68, _val69);
            }
            iprot.readMapEnd();
          }
          return stringLongMap;
        case STRING_DOUBLE_MAP:
          Map<String,Double> stringDoubleMap;
          {
            org.apache.thrift.protocol.TMap _map71 = iprot.readMapBegin();
            stringDoubleMap = new HashMap<String,Double>(2*_map71.size);
            String _key72;
            double _val73;
            for (int _i74 = 0; _i74 < _map71.size; ++_i74)
            {
              _key72 = iprot.readString();
              _val73 = iprot.readDouble();
              stringDoubleMap.put(_key72, _val73);
            }
            iprot.readMapEnd();
          }
          return stringDoubleMap;
        case STRING_STRING_SET_MAP:
          Map<String,Set<String>> stringStringSetMap;
          {
            org.apache.thrift.protocol.TMap _map75 = iprot.readMapBegin();
            stringStringSetMap = new HashMap<String,Set<String>>(2*_map75.size);
            String _key76;
            Set<String> _val77;
            for (int _i78 = 0; _i78 < _map75.size; ++_i78)
            {
              _key76 = iprot.readString();
              {
                org.apache.thrift.protocol.TSet _set79 = iprot.readSetBegin();
                _val77 = new HashSet<String>(2*_set79.size);
                String _elem80;
                for (int _i81 = 0; _i81 < _set79.size; ++_i81)
                {
                  _elem80 = iprot.readString();
                  _val77.add(_elem80);
                }
                iprot.readSetEnd();
              }
              stringStringSetMap.put(_key76, _val77);
            }
            iprot.readMapEnd();
          }
          return stringStringSetMap;
        case STRING_LONG_SET_MAP:
          Map<String,Set<Long>> stringLongSetMap;
          {
            org.apache.thrift.protocol.TMap _map82 = iprot.readMapBegin();
            stringLongSetMap = new HashMap<String,Set<Long>>(2*_map82.size);
            String _key83;
            Set<Long> _val84;
            for (int _i85 = 0; _i85 < _map82.size; ++_i85)
            {
              _key83 = iprot.readString();
              {
                org.apache.thrift.protocol.TSet _set86 = iprot.readSetBegin();
                _val84 = new HashSet<Long>(2*_set86.size);
                long _elem87;
                for (int _i88 = 0; _i88 < _set86.size; ++_i88)
                {
                  _elem87 = iprot.readI64();
                  _val84.add(_elem87);
                }
                iprot.readSetEnd();
              }
              stringLongSetMap.put(_key83, _val84);
            }
            iprot.readMapEnd();
          }
          return stringLongSetMap;
        case STRING_DOUBLE_SET_MAP:
          Map<String,Set<Double>> stringDoubleSetMap;
          {
            org.apache.thrift.protocol.TMap _map89 = iprot.readMapBegin();
            stringDoubleSetMap = new HashMap<String,Set<Double>>(2*_map89.size);
            String _key90;
            Set<Double> _val91;
            for (int _i92 = 0; _i92 < _map89.size; ++_i92)
            {
              _key90 = iprot.readString();
              {
                org.apache.thrift.protocol.TSet _set93 = iprot.readSetBegin();
                _val91 = new HashSet<Double>(2*_set93.size);
                double _elem94;
                for (int _i95 = 0; _i95 < _set93.size; ++_i95)
                {
                  _elem94 = iprot.readDouble();
                  _val91.add(_elem94);
                }
                iprot.readSetEnd();
              }
              stringDoubleSetMap.put(_key90, _val91);
            }
            iprot.readMapEnd();
          }
          return stringDoubleSetMap;
        default:
          throw new IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      throw new TProtocolException("Couldn't find a field with field id " + fieldID);
    }
  }

  @Override
  protected void tupleSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case LONG_VAL:
        Long longVal = (Long)value_;
        oprot.writeI64(longVal);
        return;
      case STRING_VAL:
        String stringVal = (String)value_;
        oprot.writeString(stringVal);
        return;
      case DOUBLE_VAL:
        Double doubleVal = (Double)value_;
        oprot.writeDouble(doubleVal);
        return;
      case LONG_SET:
        Set<Long> longSet = (Set<Long>)value_;
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I64, longSet.size()));
          for (long _iter96 : longSet)
          {
            oprot.writeI64(_iter96);
          }
          oprot.writeSetEnd();
        }
        return;
      case STRING_SET:
        Set<String> stringSet = (Set<String>)value_;
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, stringSet.size()));
          for (String _iter97 : stringSet)
          {
            oprot.writeString(_iter97);
          }
          oprot.writeSetEnd();
        }
        return;
      case DOUBLE_SET:
        Set<Double> doubleSet = (Set<Double>)value_;
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.DOUBLE, doubleSet.size()));
          for (double _iter98 : doubleSet)
          {
            oprot.writeDouble(_iter98);
          }
          oprot.writeSetEnd();
        }
        return;
      case STRING_STRING_MAP:
        Map<String,String> stringStringMap = (Map<String,String>)value_;
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, stringStringMap.size()));
          for (Map.Entry<String, String> _iter99 : stringStringMap.entrySet())
          {
            oprot.writeString(_iter99.getKey());
            oprot.writeString(_iter99.getValue());
          }
          oprot.writeMapEnd();
        }
        return;
      case STRING_LONG_MAP:
        Map<String,Long> stringLongMap = (Map<String,Long>)value_;
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I64, stringLongMap.size()));
          for (Map.Entry<String, Long> _iter100 : stringLongMap.entrySet())
          {
            oprot.writeString(_iter100.getKey());
            oprot.writeI64(_iter100.getValue());
          }
          oprot.writeMapEnd();
        }
        return;
      case STRING_DOUBLE_MAP:
        Map<String,Double> stringDoubleMap = (Map<String,Double>)value_;
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.DOUBLE, stringDoubleMap.size()));
          for (Map.Entry<String, Double> _iter101 : stringDoubleMap.entrySet())
          {
            oprot.writeString(_iter101.getKey());
            oprot.writeDouble(_iter101.getValue());
          }
          oprot.writeMapEnd();
        }
        return;
      case STRING_STRING_SET_MAP:
        Map<String,Set<String>> stringStringSetMap = (Map<String,Set<String>>)value_;
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.SET, stringStringSetMap.size()));
          for (Map.Entry<String, Set<String>> _iter102 : stringStringSetMap.entrySet())
          {
            oprot.writeString(_iter102.getKey());
            {
              oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, _iter102.getValue().size()));
              for (String _iter103 : _iter102.getValue())
              {
                oprot.writeString(_iter103);
              }
              oprot.writeSetEnd();
            }
          }
          oprot.writeMapEnd();
        }
        return;
      case STRING_LONG_SET_MAP:
        Map<String,Set<Long>> stringLongSetMap = (Map<String,Set<Long>>)value_;
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.SET, stringLongSetMap.size()));
          for (Map.Entry<String, Set<Long>> _iter104 : stringLongSetMap.entrySet())
          {
            oprot.writeString(_iter104.getKey());
            {
              oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I64, _iter104.getValue().size()));
              for (long _iter105 : _iter104.getValue())
              {
                oprot.writeI64(_iter105);
              }
              oprot.writeSetEnd();
            }
          }
          oprot.writeMapEnd();
        }
        return;
      case STRING_DOUBLE_SET_MAP:
        Map<String,Set<Double>> stringDoubleSetMap = (Map<String,Set<Double>>)value_;
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.SET, stringDoubleSetMap.size()));
          for (Map.Entry<String, Set<Double>> _iter106 : stringDoubleSetMap.entrySet())
          {
            oprot.writeString(_iter106.getKey());
            {
              oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.DOUBLE, _iter106.getValue().size()));
              for (double _iter107 : _iter106.getValue())
              {
                oprot.writeDouble(_iter107);
              }
              oprot.writeSetEnd();
            }
          }
          oprot.writeMapEnd();
        }
        return;
      default:
        throw new IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TField getFieldDesc(_Fields setField) {
    switch (setField) {
      case LONG_VAL:
        return LONG_VAL_FIELD_DESC;
      case STRING_VAL:
        return STRING_VAL_FIELD_DESC;
      case DOUBLE_VAL:
        return DOUBLE_VAL_FIELD_DESC;
      case LONG_SET:
        return LONG_SET_FIELD_DESC;
      case STRING_SET:
        return STRING_SET_FIELD_DESC;
      case DOUBLE_SET:
        return DOUBLE_SET_FIELD_DESC;
      case STRING_STRING_MAP:
        return STRING_STRING_MAP_FIELD_DESC;
      case STRING_LONG_MAP:
        return STRING_LONG_MAP_FIELD_DESC;
      case STRING_DOUBLE_MAP:
        return STRING_DOUBLE_MAP_FIELD_DESC;
      case STRING_STRING_SET_MAP:
        return STRING_STRING_SET_MAP_FIELD_DESC;
      case STRING_LONG_SET_MAP:
        return STRING_LONG_SET_MAP_FIELD_DESC;
      case STRING_DOUBLE_SET_MAP:
        return STRING_DOUBLE_SET_MAP_FIELD_DESC;
      default:
        throw new IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TStruct getStructDesc() {
    return STRUCT_DESC;
  }

  @Override
  protected _Fields enumForId(short id) {
    return _Fields.findByThriftIdOrThrow(id);
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public long getLongVal() {
    if (getSetField() == _Fields.LONG_VAL) {
      return (Long)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'longVal' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setLongVal(long value) {
    setField_ = _Fields.LONG_VAL;
    value_ = value;
  }

  public String getStringVal() {
    if (getSetField() == _Fields.STRING_VAL) {
      return (String)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'stringVal' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setStringVal(String value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.STRING_VAL;
    value_ = value;
  }

  public double getDoubleVal() {
    if (getSetField() == _Fields.DOUBLE_VAL) {
      return (Double)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'doubleVal' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setDoubleVal(double value) {
    setField_ = _Fields.DOUBLE_VAL;
    value_ = value;
  }

  public Set<Long> getLongSet() {
    if (getSetField() == _Fields.LONG_SET) {
      return (Set<Long>)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'longSet' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setLongSet(Set<Long> value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.LONG_SET;
    value_ = value;
  }

  public Set<String> getStringSet() {
    if (getSetField() == _Fields.STRING_SET) {
      return (Set<String>)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'stringSet' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setStringSet(Set<String> value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.STRING_SET;
    value_ = value;
  }

  public Set<Double> getDoubleSet() {
    if (getSetField() == _Fields.DOUBLE_SET) {
      return (Set<Double>)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'doubleSet' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setDoubleSet(Set<Double> value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.DOUBLE_SET;
    value_ = value;
  }

  public Map<String,String> getStringStringMap() {
    if (getSetField() == _Fields.STRING_STRING_MAP) {
      return (Map<String,String>)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'stringStringMap' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setStringStringMap(Map<String,String> value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.STRING_STRING_MAP;
    value_ = value;
  }

  public Map<String,Long> getStringLongMap() {
    if (getSetField() == _Fields.STRING_LONG_MAP) {
      return (Map<String,Long>)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'stringLongMap' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setStringLongMap(Map<String,Long> value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.STRING_LONG_MAP;
    value_ = value;
  }

  public Map<String,Double> getStringDoubleMap() {
    if (getSetField() == _Fields.STRING_DOUBLE_MAP) {
      return (Map<String,Double>)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'stringDoubleMap' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setStringDoubleMap(Map<String,Double> value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.STRING_DOUBLE_MAP;
    value_ = value;
  }

  public Map<String,Set<String>> getStringStringSetMap() {
    if (getSetField() == _Fields.STRING_STRING_SET_MAP) {
      return (Map<String,Set<String>>)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'stringStringSetMap' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setStringStringSetMap(Map<String,Set<String>> value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.STRING_STRING_SET_MAP;
    value_ = value;
  }

  public Map<String,Set<Long>> getStringLongSetMap() {
    if (getSetField() == _Fields.STRING_LONG_SET_MAP) {
      return (Map<String,Set<Long>>)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'stringLongSetMap' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setStringLongSetMap(Map<String,Set<Long>> value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.STRING_LONG_SET_MAP;
    value_ = value;
  }

  public Map<String,Set<Double>> getStringDoubleSetMap() {
    if (getSetField() == _Fields.STRING_DOUBLE_SET_MAP) {
      return (Map<String,Set<Double>>)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'stringDoubleSetMap' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setStringDoubleSetMap(Map<String,Set<Double>> value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.STRING_DOUBLE_SET_MAP;
    value_ = value;
  }

  public boolean isSetLongVal() {
    return setField_ == _Fields.LONG_VAL;
  }


  public boolean isSetStringVal() {
    return setField_ == _Fields.STRING_VAL;
  }


  public boolean isSetDoubleVal() {
    return setField_ == _Fields.DOUBLE_VAL;
  }


  public boolean isSetLongSet() {
    return setField_ == _Fields.LONG_SET;
  }


  public boolean isSetStringSet() {
    return setField_ == _Fields.STRING_SET;
  }


  public boolean isSetDoubleSet() {
    return setField_ == _Fields.DOUBLE_SET;
  }


  public boolean isSetStringStringMap() {
    return setField_ == _Fields.STRING_STRING_MAP;
  }


  public boolean isSetStringLongMap() {
    return setField_ == _Fields.STRING_LONG_MAP;
  }


  public boolean isSetStringDoubleMap() {
    return setField_ == _Fields.STRING_DOUBLE_MAP;
  }


  public boolean isSetStringStringSetMap() {
    return setField_ == _Fields.STRING_STRING_SET_MAP;
  }


  public boolean isSetStringLongSetMap() {
    return setField_ == _Fields.STRING_LONG_SET_MAP;
  }


  public boolean isSetStringDoubleSetMap() {
    return setField_ == _Fields.STRING_DOUBLE_SET_MAP;
  }


  public boolean equals(Object other) {
    if (other instanceof AggregationResult) {
      return equals((AggregationResult)other);
    } else {
      return false;
    }
  }

  public boolean equals(AggregationResult other) {
    return other != null && getSetField() == other.getSetField() && getFieldValue().equals(other.getFieldValue());
  }

  @Override
  public int compareTo(AggregationResult other) {
    int lastComparison = org.apache.thrift.TBaseHelper.compareTo(getSetField(), other.getSetField());
    if (lastComparison == 0) {
      return org.apache.thrift.TBaseHelper.compareTo(getFieldValue(), other.getFieldValue());
    }
    return lastComparison;
  }


  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();
    list.add(this.getClass().getName());
    org.apache.thrift.TFieldIdEnum setField = getSetField();
    if (setField != null) {
      list.add(setField.getThriftFieldId());
      Object value = getFieldValue();
      if (value instanceof org.apache.thrift.TEnum) {
        list.add(((org.apache.thrift.TEnum)getFieldValue()).getValue());
      } else {
        list.add(value);
      }
    }
    return list.hashCode();
  }
  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


}
